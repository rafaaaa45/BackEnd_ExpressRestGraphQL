


/* view de suporte count devido aos upserts de location e companie ele ir√° fazer 3 vezes o total de offices*/

CREATE OR REPLACE VIEW public.countoffices
 AS
 WITH allOffices AS (
         SELECT unnest(xpath('//offices/office', "salariosXML"."importedFile")) 
           FROM "salariosXML"
          WHERE "salariosXML"."isDeleted" = false
        ), 
		countworkers as (SELECT unnest(xpath('//offices/office/workers/worker', "salariosXML"."importedFile")) 
           FROM "salariosXML"
          WHERE "salariosXML"."isDeleted" = false)
 SELECT (((SELECT count(*) 
   FROM allOffices ) * 3) + (Select count(*) from countworkers) ) AS count ;


CREATE OR REPLACE VIEW public.allFiles
 AS
Select id from "salariosXML" where "isDeleted" = false ;



Select * from countoffices;


CREATE OR REPLACE FUNCTION public.listagem_offices(
	 idFicheiro integer
	)
    RETURNS SETOF json 
    LANGUAGE 'plpgsql'
   

AS $BODY$
DECLARE 
   i integer;
   offi RECORD;
   DECLARE offices cursor(idFicheiro integer, i integer) for
    with locations as (select unnest(xpath('//locations/location/@nome' ,"importedFile"))::text as "location",
        unnest(xpath('//locations/location/@id' ,"importedFile"))::text as "id" from "salariosXML" Where "isDeleted" = false and "id" = idFicheiro)
            , empresas as (select unnest(xpath('//companies/company/@nome' ,"importedFile"))::text as "companie",
        unnest(xpath('//companies/company/@id' ,"importedFile"))::text as "id" from "salariosXML" Where "isDeleted" = false and "id" = idFicheiro)
            , offices_idLocation_idEmpresa as (select unnest(xpath('//offices/office/location/@ref' ,"importedFile"))::text as "idl",
        unnest(xpath('//offices/office/company/@ref' ,"importedFile"))::text "ide" from "salariosXML" Where "isDeleted" = false and "id" = idFicheiro)
            , offices_Location_Empresa as (select l.location, e.companie  from offices_idLocation_idEmpresa as o 
                INNER JOIN locations as l ON o.idl = l.id 
                Inner join empresas as e ON o.ide = e.id),	 	 
	  todasTags as (select unnest(xpath('//tags/tag/@nome' ,"importedFile"))::text as "tags",
     unnest(xpath('//tags/tag/@id' ,"importedFile"))::text as "ids" from "salariosXML" Where "isDeleted" = false and "id" = idFicheiro),
     workers as (select unnest(xpath('//workers/worker/totalyearlycompensation/text()' , subquery.workers))::text as "totalyearlycompensation" ,
				 unnest(xpath('//workers/worker/tag/@ref' , subquery.workers))::text as "idtagworker",
				 unnest(xpath('//workers/worker/monthlysalary/text()' , subquery.workers))::text as "monthlysalary",
				 unnest(xpath('//workers/worker/yearsofexperience/text()' , subquery.workers))::text as "yearsofexperience",
				 unnest(xpath('//workers/worker/yearsatcompany/text()' , subquery.workers))::text as "yearsatcompany"
				 from (SELECT  unnest(xpath('//offices/office/workers' ,"importedFile")) as "workers" from "salariosXML" Where "isDeleted" = false and "id" = idFicheiro limit 1 offset i)subquery),
	workerResult as (Select json_agg(workerobject) as workers from 
  (Select json_build_object('totalyearlycompensation',trim(regexp_replace(totalyearlycompensation, E'[\\n\\r]+', ' ', 'g' )), 'tag_id' , tag.tags,'yearsatcompany', trim(regexp_replace(yearsatcompany, E'[\\n\\r]+', ' ', 'g' )),'monthlysalary', trim(regexp_replace(monthlysalary, E'[\\n\\r]+', ' ', 'g' )) , 'yearsofexperience',trim(regexp_replace(yearsofexperience, E'[\\n\\r]+', ' ', 'g' )))workerobject
   from workers as w inner join todasTags as tag on tag.ids = w.idtagworker )worker),
  officeresult as (SELECT (json_build_object('location', location, 'companie' , companie )) as location_companie from offices_Location_Empresa limit 1 offset i)
	SELECT json_build_object('locationscompanies' , location_companie , 'workers', (Select * from workerResult)) as finalResult from officeResult;
				 
BEGIN
i:= 0;
	LOOP
		open offices(idFicheiro, i);	
		fetch next from offices into offi;
		if offi IS NULL 
		then exit;	
		END IF;
		close offices;	
		
		i:= i + 1;		
		
		return next offi;

	END LOOP;		 
     
	

END;
$BODY$;


select listagem_offices(23);










